{"ast":null,"code":"var _jsxFileName = \"/Users/tim/Documents/React/React_test/src/SortableTable.js\";\nimport React from \"react\";\nimport 'antd/dist/antd.css';\nimport \"react-table-6/react-table.css\";\nimport { MenuOutlined } from '@ant-design/icons';\nimport { sortableContainer, sortableElement, sortableHandle } from 'react-sortable-hoc';\nimport { Table } from 'antd';\nimport arrayMove from 'array-move';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DragHandle = sortableHandle(_c = () => /*#__PURE__*/_jsxDEV(MenuOutlined, {\n  style: {\n    cursor: 'grab',\n    color: '#999'\n  }\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 11,\n  columnNumber: 41\n}, this));\n_c2 = DragHandle;\n\nfunction changeOrderStatus(event) {\n  event.target.parentNode.parentNode.nextSibling.textContent = \"已派工\";\n  event.target.parentNode.parentNode.nextSibling.style.color = \"blue\";\n}\n\nconst SortableItem = sortableElement(_c3 = props => /*#__PURE__*/_jsxDEV(\"tr\", { ...props\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 17,\n  columnNumber: 47\n}, this));\n_c4 = SortableItem;\nconst SortableContainer = sortableContainer(_c5 = props => /*#__PURE__*/_jsxDEV(\"tbody\", { ...props\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 18,\n  columnNumber: 54\n}, this));\n_c6 = SortableContainer;\nvar table_data = [];\nconst data = [{\n  title: '1',\n  dataIndex: 'John Brown',\n  age: 32,\n  className: 'New York No. 1 Lake Park'\n}, {\n  title: '2',\n  dataIndex: 'Jim Green',\n  age: 42,\n  className: 'London No. 1 Lake Park'\n}, {\n  title: '3',\n  dataIndex: 'Joe Black',\n  age: 32,\n  className: 'Sidney No. 1 Lake Park'\n}];\n\nclass SortableTable extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      dataSource: table_data,\n      metadata: []\n    };\n\n    this.onSortEnd = ({\n      oldIndex,\n      newIndex\n    }) => {\n      var {\n        dataSource\n      } = this.state;\n\n      if (oldIndex !== newIndex) {\n        var newData = arrayMove([].concat(dataSource), oldIndex, newIndex).filter(el => !!el); //table_data = newData;\n\n        this.setState({\n          dataSource: newData\n        });\n        console.log(dataSource);\n        console.log(newData);\n      }\n    };\n\n    this.DraggableContainer = props => /*#__PURE__*/_jsxDEV(SortableContainer, {\n      useDragHandle: true,\n      disableAutoscroll: true,\n      helperClass: \"row-dragging\",\n      onSortEnd: this.onSortEnd,\n      ...props\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 4\n    }, this);\n\n    this.DraggableBodyRow = ({\n      className,\n      style,\n      ...restProps\n    }) => {\n      var index = 0;\n\n      if (this.state.dataSource.length > 0) {\n        index = this.state.dataSource.findIndex(x => x.index === restProps['data-row-key']);\n      }\n\n      return /*#__PURE__*/_jsxDEV(SortableItem, {\n        index: index,\n        ...restProps\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 10\n      }, this);\n    };\n  }\n\n  render() {\n    //this.state.data = this.props.data;\n    //this.state.metadata = this.props.metadata;\n    table_data = this.props.data;\n    this.state.dataSource = table_data;\n    return /*#__PURE__*/_jsxDEV(Table, {\n      pagination: false,\n      dataSource: this.state.dataSource //{this.state.data}\n      ,\n      columns: this.props.metadata //{this.state.metadata}\n      ,\n      rowKey: \"index\",\n      components: {\n        body: {\n          wrapper: this.DraggableContainer,\n          row: this.DraggableBodyRow\n        }\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 3\n    }, this);\n  }\n\n}\n/*class SortableTable extends React.Component {\n\tconstructor(props){\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tdataSource: [],\n\t\t};\n    }\n    onSortEnd = ({ oldIndex, newIndex }) => {\n\t\tif (oldIndex !== newIndex) {\n\t\t\tthis.props.data = arrayMove([].concat(this.props.data), oldIndex, newIndex).filter(el => !!el);\n\t\t}\n\t};\n    DraggableContainer = props => (\n    \t<SortableContainer\n    \t\tuseDragHandle\n        \tdisableAutoscroll\n        \thelperClass=\"row-dragging\"\n        \tonSortEnd={this.onSortEnd}\n        \t{...props}\n      \t/>\n    );\n  \n    DraggableBodyRow = ({ className, style, ...restProps }) => {\n\t\tconst { dataSource } = this.state;\n\t\tconst index = dataSource.findIndex(x => x.index === restProps['data-row-key']);\n\t\treturn <SortableItem index={index} {...restProps} />;\n    };\n    render() {\n      \treturn (\n        \t<Table\n          \t\tpagination={false}\n          \t\tcolumns={this.props.metadata}\n\t\t\t\tdataSource ={this.props.data}\n          \t\trowKey=\"index\"\n          \t\tcomponents={\n\t\t\t\t\t{\n\t\t\t\t\t\tbody: {\n\t\t\t\t\t\t\twrapper: this.DraggableContainer,\n\t\t\t\t\t\t\trow: this.DraggableBodyRow,\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n        \t/>\n      \t);\n    }\n}*/\n\n\nexport default SortableTable;\n\nvar _c, _c2, _c3, _c4, _c5, _c6;\n\n$RefreshReg$(_c, \"DragHandle$sortableHandle\");\n$RefreshReg$(_c2, \"DragHandle\");\n$RefreshReg$(_c3, \"SortableItem$sortableElement\");\n$RefreshReg$(_c4, \"SortableItem\");\n$RefreshReg$(_c5, \"SortableContainer$sortableContainer\");\n$RefreshReg$(_c6, \"SortableContainer\");","map":{"version":3,"sources":["/Users/tim/Documents/React/React_test/src/SortableTable.js"],"names":["React","MenuOutlined","sortableContainer","sortableElement","sortableHandle","Table","arrayMove","DragHandle","cursor","color","changeOrderStatus","event","target","parentNode","nextSibling","textContent","style","SortableItem","props","SortableContainer","table_data","data","title","dataIndex","age","className","SortableTable","Component","state","dataSource","metadata","onSortEnd","oldIndex","newIndex","newData","concat","filter","el","setState","console","log","DraggableContainer","DraggableBodyRow","restProps","index","length","findIndex","x","render","body","wrapper","row"],"mappings":"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","sourcesContent":["\nimport React from \"react\";\nimport 'antd/dist/antd.css';\nimport \"react-table-6/react-table.css\";\nimport { MenuOutlined } from '@ant-design/icons';\nimport { sortableContainer, sortableElement, sortableHandle } from 'react-sortable-hoc';\nimport { Table } from 'antd';\nimport arrayMove from 'array-move';\n\n\nconst DragHandle = sortableHandle(() => <MenuOutlined style={{ cursor: 'grab', color: '#999' }} />);\nfunction changeOrderStatus(event){\n\tevent.target.parentNode.parentNode.nextSibling.textContent = \"已派工\";\n\tevent.target.parentNode.parentNode.nextSibling.style.color = \"blue\";\n}\n\nconst SortableItem = sortableElement(props => <tr {...props} />);\nconst SortableContainer = sortableContainer(props => <tbody {...props} />);\n\nvar table_data = [];\nconst data = [\n\t{\n\t\ttitle: '1',\n\t\tdataIndex: 'John Brown',\n\t  age: 32,\n\t  className: 'New York No. 1 Lake Park',\n\t},\n\t{\n\t\ttitle: '2',\n\t\tdataIndex: 'Jim Green',\n\t  age: 42,\n\t  className: 'London No. 1 Lake Park',\n\t},\n\t{\n\t\ttitle: '3',\n\t\tdataIndex: 'Joe Black',\n\t  age: 32,\n\t  className: 'Sidney No. 1 Lake Park',\n\t},\n  ];\nclass SortableTable extends React.Component {\n\tstate = {\n\t\tdataSource: table_data,\n\t\tmetadata:[]\n\t};\n\tonSortEnd = ({ oldIndex, newIndex }) => {\n\t\tvar { dataSource } = this.state;\n\t  \tif (oldIndex !== newIndex){\n\t\t\tvar newData = arrayMove([].concat(dataSource), oldIndex, newIndex).filter(el => !!el);\n\t\t\t//table_data = newData;\n\t\t\tthis.setState({dataSource: newData});\n\t\t\tconsole.log(dataSource);\n\t\t\tconsole.log(newData);\n\t  \t}\n\t};\n\tDraggableContainer = props => (\n\t  <SortableContainer\n\t\tuseDragHandle\n\t\tdisableAutoscroll\n\t\thelperClass=\"row-dragging\"\n\t\tonSortEnd={this.onSortEnd}\n\t\t{...props}\n\t  />\n\t);\n\tDraggableBodyRow = ({ className, style, ...restProps }) => {\n\t\tvar index = 0;\n\t\tif(this.state.dataSource.length > 0){\n\t\t\tindex = this.state.dataSource.findIndex(x => x.index === restProps['data-row-key']);\n\t\t}\n\t\treturn <SortableItem index={index} {...restProps} />;\n\t};\n\trender() {\n\t\t//this.state.data = this.props.data;\n\t\t//this.state.metadata = this.props.metadata;\n\t\ttable_data = this.props.data;\n\t\tthis.state.dataSource = table_data;\n\t  return (\n\t\t<Table\n\t\t  pagination={false}\n\t\t  dataSource={this.state.dataSource}//{this.state.data}\n\t\t  columns={this.props.metadata}//{this.state.metadata}\n\t\t  rowKey=\"index\"\n\t\t  components={{\n\t\t\tbody: {\n\t\t\t  wrapper: this.DraggableContainer,\n\t\t\t  row: this.DraggableBodyRow,\n\t\t\t},\n\t\t  }}\n\t\t/>\n\t  );\n\t}\n  }\n\n/*class SortableTable extends React.Component {\n\tconstructor(props){\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tdataSource: [],\n\t\t};\n    }\n    onSortEnd = ({ oldIndex, newIndex }) => {\n\t\tif (oldIndex !== newIndex) {\n\t\t\tthis.props.data = arrayMove([].concat(this.props.data), oldIndex, newIndex).filter(el => !!el);\n\t\t}\n\t};\n    DraggableContainer = props => (\n    \t<SortableContainer\n    \t\tuseDragHandle\n        \tdisableAutoscroll\n        \thelperClass=\"row-dragging\"\n        \tonSortEnd={this.onSortEnd}\n        \t{...props}\n      \t/>\n    );\n  \n    DraggableBodyRow = ({ className, style, ...restProps }) => {\n\t\tconst { dataSource } = this.state;\n\t\tconst index = dataSource.findIndex(x => x.index === restProps['data-row-key']);\n\t\treturn <SortableItem index={index} {...restProps} />;\n    };\n    render() {\n      \treturn (\n        \t<Table\n          \t\tpagination={false}\n          \t\tcolumns={this.props.metadata}\n\t\t\t\tdataSource ={this.props.data}\n          \t\trowKey=\"index\"\n          \t\tcomponents={\n\t\t\t\t\t{\n\t\t\t\t\t\tbody: {\n\t\t\t\t\t\t\twrapper: this.DraggableContainer,\n\t\t\t\t\t\t\trow: this.DraggableBodyRow,\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n        \t/>\n      \t);\n    }\n}*/\n\nexport default SortableTable"]},"metadata":{},"sourceType":"module"}